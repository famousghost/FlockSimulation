#pragma kernel FlockSimulation

struct Boid
{
    float4 worldPosition; // pos x, y, z | radius w
    float4 size;
    float4 velocity; // velocity x y z | debug
    float4 acceleration;
    float4x4 localToWorldMatrix;
};

struct Obstacles
{
    float4 worldPosition; //x - posX, y - posY, z - posZ, w type
    float4 worldSize;
    float4x4 rotation;
};

RWStructuredBuffer<Boid> _Boids;
StructuredBuffer<Obstacles> _Obstacles;
StructuredBuffer<float4> _AvoidancePoints;
int _BoidsAmount;
int _ObstacleAmount;
int _AvoidancePointAmount;
float _DeltaTime;

cbuffer FlockData
{
    float CohesionStrength;
    float SeparationStrength;
    float AlignmentStrength;
    float WallAvoidanceStrength;
    float MaxAngle;
    float MaxLength;
    float FlockRadius;
    float MaxVelocity;
};

struct BoxHit
{
    float3 hitPoint;
    float depth;
    bool hit;
};

BoxHit BoxRaycast(const Boid boid, const float4 avoidancePoint, const Obstacles obstacle)
{
    BoxHit boxHit;
    boxHit.hit = false;
    boxHit.hitPoint = float3(0.0f, 0.0f, 0.0f);
    boxHit.depth = 0.0f;
    
    const float3 avoidancePointWS = mul(boid.localToWorldMatrix, avoidancePoint).xyz;

    const float3 worldDir = normalize(avoidancePointWS - boid.worldPosition.xyz);
    
    const float3 p = obstacle.worldPosition.xyz - boid.worldPosition.xyz;

    const float x = dot(obstacle.rotation[0].xyz, p);
    const float y = dot(obstacle.rotation[1].xyz, p);
    const float z = dot(obstacle.rotation[2].xyz, p);
    
    const float rdX = dot(obstacle.rotation[0].xyz, worldDir);
    const float rdY = dot(obstacle.rotation[1].xyz, worldDir);
    const float rdZ = dot(obstacle.rotation[2].xyz, worldDir);
    
    const float3 size = obstacle.worldSize.xyz * 0.5f;
    
    const float3 minOBB = float3(x - size.x, y - size.y, z - size.z);
    const float3 maxOBB = float3(x + size.x, y + size.y, z + size.z);
    
    const float3 newDir = float3(rdX, rdY, rdZ);

    const float3 pMin = minOBB / newDir;
    const float3 pMax = maxOBB / newDir;

    const float3 tMin = float3(min(pMin.x, pMax.x), min(pMin.y, pMax.y), min(pMin.z, pMax.z));
    const float3 tMax = float3(max(pMin.x, pMax.x), max(pMin.y, pMax.y), max(pMin.z, pMax.z));

    const float maxMin = max(max(tMin.x, tMin.y), tMin.z);

    const float minMax = min(min(tMax.x, tMax.y), tMax.z);

    if (minMax <= 0.0f)
    { 
        return boxHit;
    }

    if (minMax <= maxMin)
    {
        return boxHit;
    }
    if (maxMin <= 0.0f)
    {
        if (minMax > MaxLength || obstacle.worldSize.a == 0.0f)
        {
            return boxHit;
        }
        boxHit.hit = true;
        boxHit.hitPoint = boid.worldPosition.xyz + worldDir * minMax;
        boxHit.depth = minMax;
        return boxHit;
    }

    if (maxMin > MaxLength)
    {
        return boxHit;
    }
    boxHit.hit = true;
    boxHit.hitPoint = boid.worldPosition.xyz + worldDir * maxMin;
    boxHit.depth = maxMin;
    return boxHit;
}

float3 WallAvoidance(Boid boid)
{
    float3 force = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < _AvoidancePointAmount; ++i)
    {
        for (int j = 0; j < _ObstacleAmount; ++j)
        {
            BoxHit boxHit = BoxRaycast(boid, _AvoidancePoints[i], _Obstacles[j]);
            if (boxHit.hit)
            {
                force = force + normalize(boid.worldPosition.xyz - boxHit.hitPoint.xyz) / (boxHit.depth * boxHit.depth + 1.0f);
            }
        }
    }
    return force;
}

bool IsClosestBoid(const Boid currentBoid, const Boid otherBoid)
{
    const float3 dir = currentBoid.worldPosition.xyz - otherBoid.worldPosition.xyz;
    if (dot(dir, dir) > (FlockRadius * FlockRadius))
    {
        return false;
    }
    return true;
}

float3 CohesionRule(const Boid otherBoid)
{
    return otherBoid.worldPosition.xyz;
}

float3 SepeationRule(const Boid currentBoid, const Boid otherBoid)
{
    return normalize(currentBoid.worldPosition.xyz - otherBoid.worldPosition.xyz);
}

float3 AlignmentRule(const Boid otherBoid)
{
    return otherBoid.velocity.xyz;

}

float4x4 createModelMatrix(float3 forward, float3 up, float3 position, float3 scale)
{
    float3 dir = forward;
    float3 right = normalize(cross(up, dir));
    float3 newUp = normalize(cross(dir, right));
    
    float4x4 translateMatrix = float4x4(float4(scale.x, 0.0f, 0.0f, position.x),
                                        float4(0.0f, scale.y, 0.0f, position.y),
                                        float4(0.0f, 0.0f, scale.z, position.z),
                                        float4(0.0f, 0.0f, 0.0f, 1.0f));
    
    return mul(translateMatrix, transpose(float4x4(float4(right.x, right.y, right.z, 0.0f),
                    float4(newUp.x, newUp.y, newUp.z, 0.0f),
                    float4(dir.x, dir.y, dir.z, 0.0f),
                    float4(0.0f, 0.0f, 0.0f, 1.0f))));

}

[numthreads(8,1,1)]
void FlockSimulation(uint id : SV_DispatchThreadID)
{
    float3 cohesion = float3(0.0f, 0.0f, 0.0f);
    float3 separationDir = float3(0.0f, 0.0f, 0.0f);
    float3 alignment = float3(0.0f, 0.0f, 0.0f);
    float3 acceleration = _Boids[id].acceleration.xyz;
    float3 velocity = _Boids[id].velocity.xyz;
    int amount = 0;
    for (int i = 0; i < _BoidsAmount; ++i)
    {
        if (!IsClosestBoid(_Boids[id], _Boids[i]) || id == i)
        {
            continue;
        }
        cohesion += CohesionRule(_Boids[i]);
        separationDir += SepeationRule(_Boids[id], _Boids[i]);
        alignment += AlignmentRule(_Boids[i]);
        amount++;
    }
    if(amount > 0)
    {
        acceleration += normalize(alignment / float(amount)) * AlignmentStrength;
        acceleration += normalize((cohesion / float(amount)) - _Boids[id.x].worldPosition.xyz) * CohesionStrength;
        acceleration += normalize((separationDir / float(amount))) * SeparationStrength;
    }
    acceleration = acceleration + WallAvoidance(_Boids[id]) * WallAvoidanceStrength;
    velocity.xyz = velocity.xyz + acceleration * _DeltaTime * _DeltaTime;
    float3 forward = normalize(velocity.xyz);
    velocity.xyz = forward * MaxVelocity;
    float3 worldPos = _Boids[id].worldPosition.xyz + velocity.xyz * _DeltaTime;
    
    _Boids[id].acceleration.xyz = acceleration;
    _Boids[id].velocity.xyz = velocity.xyz;
    _Boids[id].worldPosition.xyz = worldPos;
    _Boids[id].localToWorldMatrix = createModelMatrix(forward, float3(0.0f, 1.0f, 0.0f), worldPos, _Boids[id].size.xyz);
    
}
